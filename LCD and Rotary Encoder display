/* For using TM1637 LCD, 4 digit, 7 segment for arduino nano (used on spindle control module encoder feedback)

LCD: https://www.amazon.com/gp/product/B072N2LDBW/ref=oh_aui_detailpage_o00_s01?ie=UTF8&psc=1
Encoder: https://www.amazon.com/gp/product/B00UTIFCVA/ref=oh_aui_search_detailpage?ie=UTF8&psc=1


LCD TM1637 reference library:
https://github.com/bremme/arduino-tm1637

The display modules has two signal connection (and two power connections) which are CLK and DIO. These pins can be connected to any pair of digital pins on the Arduino. When an object is created, the pins should be configured.

Nano pinout with encoder:

Arduino				Encoder-Cable
GND (next to D2)	Black
+5V					Red
D2					Green
D3					White

Arduino				LCD Unit
D4					DIO
D5					CLK
+5V					+5V
GND					GND

*/


#include "SevenSegmentTM1637.h"
#include "SevenSegmentExtended.h"

/* initialize global TM1637 Display object
*  The constructor takes two arguments, the number of the clock pin and the digital output pin:
* SevenSegmentTM1637(byte pinCLK, byte pinDIO);
*/
//lcd
const byte PIN_CLK = 4;   // define CLK pin (any digital pin)
const byte PIN_DIO = 5;   // define DIO pin (any digital pin)
SevenSegmentExtended      display(PIN_CLK, PIN_DIO);

// Red - 5V
// Black - GND
const int encoder_phaseA = 2; // Green - pin 2 - Digital
const int encoder_phaseB = 3; // White - pin 3 - Digital
volatile int pulseCount = 0;


// run setup code
void setup() {
  //lcd
  Serial.begin(9600);         // initializes the Serial connection @ 9600 baud
  display.begin();            // initializes the display
  display.setBacklight(100);  // set the brightness to 100 %


  //encoder
  pinMode(encoder_phaseA, INPUT_PULLUP);
  pinMode(encoder_phaseB, INPUT_PULLUP);

  attachInterrupt(0,enc_pin_changeA, CHANGE);
  attachInterrupt(1,enc_pin_changeB, CHANGE);

  delay(1000);                // wait 1000 ms
  
};

// run loop (forever)
void loop(){
noInterrupts()


/*count pulses per 1s
(x pulses/sec*60)/600 ppr
*/

//display.print(encoder);

  //float speed = ((pulseSec * 60)/600) / (now - prev); //(pulse/second *60min)/600ppr
  //prev = now;
  

interrupts();

}

void enc_pin_changeA(){ //add pulses to pulseCount
pulseCount = digitalRead(encoder_phaseA) == digitalRead(encoder_phaseB)?-1:1;
}

void enc_pin_changeB(){ //add pulses to pulseCount
pulseCount = digitalRead(encoder_phaseA) != digitalRead(encoder_phaseB)?-1:1;
}



